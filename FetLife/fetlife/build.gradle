apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

ext.releaseProperties = new Properties()

def propFile = file('../../../android-release/release.properties')
if (propFile.canRead()) {
    releaseProperties.load(new FileInputStream(propFile))
} else {
    releaseProperties = null;
}

def versionTimeStamp = (new Date().time / 1000).toInteger()

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.bitlove.fetlife"
        minSdkVersion 21
        targetSdkVersion 26
        multiDexEnabled true

        versionCode versionTimeStamp
        versionName "3.0.3"

        vectorDrawables.useSupportLibrary = true

        buildConfigField "Boolean", "PREVIEW", "false"
    }

    signingConfigs {

        internal {
            if (releaseProperties != null) {
                storeFile file(releaseProperties['ks.url'])
                storePassword releaseProperties['ks.password']
                keyAlias releaseProperties['ks.key.alias']
                keyPassword releaseProperties['ks.key.password']
            }
        }

        release {
            if (releaseProperties != null) {
                storeFile file(releaseProperties['ks.url'])
                storePassword releaseProperties['ks.password']
                keyAlias releaseProperties['ks.key.alias']
                keyPassword releaseProperties['ks.key.password']
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {

        debug {

            ext.fabricApiKey = "9458d1130328510f43f88f9262670d7f81276071"
            ext.fabricApiSecret = "44a9fb077adf858f979097d8315bd1de9124dda2c00b63a067015d3610315c0a"

            manifestPlaceholders = [manifestApplicationId          : "${defaultConfig.applicationId}",
                                    onesignal_app_id               : "f439ffb1-98ef-4548-9769-cca2998ebcb8",
                                    onesignal_google_project_number: "875783571094",
                                    fabricApiKey                   : "${ext.fabricApiKey}"]

            buildConfigField "String", "CLIENT_ID", "\"7334c23954813ae31a3a3e203f86ea909b4deb34707fa18e2475ba0424025da5\""
            buildConfigField "String", "CLIENT_SECRET", "\"YoZv1To+R8ZqoHOm7l+YWVtNfukBUVsQZ87EOJO8xFOt/De6Khy2XBuvbDxunkBQvPXxnn8/WUy2LPKMOkvmWOy5GWLnfP+qhDu5B28u1xU=\""
            buildConfigField "String", "REDIRECT_URL", "\"fetlifeapp://oauth/callback\""
            buildConfigField "String", "SECURE_API_IV", "\"YZKCEid05RDUX7tsXBRFgg==\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix = '.dev'

        }

        internal {

            versionNameSuffix "+" + versionTimeStamp

            if (releaseProperties != null) {

                ext.fabricApiKey = releaseProperties['fabric.apiKey']
                ext.fabricApiSecret = releaseProperties['fabric.apiSecret']

                manifestPlaceholders = [manifestApplicationId          : "${defaultConfig.applicationId}",
                                        onesignal_app_id               : releaseProperties['onesignal.appId'],
                                        onesignal_google_project_number: releaseProperties['onesignal.projectNumber'],
                                        fabricApiKey                   : releaseProperties['fabric.apiKey']]

                buildConfigField "String", "CLIENT_ID", releaseProperties['api.clientId']
                buildConfigField "String", "CLIENT_SECRET", releaseProperties['api.clientSecret']
                buildConfigField "String", "REDIRECT_URL", releaseProperties['api.redirectUrl']
                buildConfigField "String", "SECURE_API_IV", releaseProperties['secureapi.iv']
            }

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        release {

            if (releaseProperties != null) {

                ext.fabricApiKey = releaseProperties['fabric.apiKey']
                ext.fabricApiSecret = releaseProperties['fabric.apiSecret']

                manifestPlaceholders = [manifestApplicationId          : "${defaultConfig.applicationId}",
                                        onesignal_app_id               : releaseProperties['onesignal.appId'],
                                        onesignal_google_project_number: releaseProperties['onesignal.projectNumber'],
                                        fabricApiKey                   : releaseProperties['fabric.apiKey']]

                buildConfigField "String", "CLIENT_ID", releaseProperties['api.clientId']
                buildConfigField "String", "CLIENT_SECRET", releaseProperties['api.clientSecret']
                buildConfigField "String", "REDIRECT_URL", releaseProperties['api.redirectUrl']
                buildConfigField "String", "SECURE_API_IV", releaseProperties['secureapi.iv']
            }

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/LICENSE-LGPL-2.1.txt'
        exclude 'META-INF/LICENSE-LGPL-3.txt'
        exclude 'META-INF/LICENSE-W3C-TEST'
    }
}

def dbflow_version = "4.2.4"

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.21"

    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.google.firebase:firebase-messaging:17.5.0'

    implementation 'com.google.android.gms:play-services-analytics:16.0.1'
    implementation 'com.google.android.gms:play-services-places:15.0.1'
    implementation 'com.google.android.gms:play-services-location:15.0.1'
    implementation 'com.google.android.gms:play-services-maps:15.0.1'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'

    implementation 'androidx.appcompat:appcompat:1.2.0-beta01'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.browser:browser:1.3.0-alpha01'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'

    implementation 'com.google.android.material:material:1.0.0-beta01'

    implementation 'com.google.maps.android:android-maps-utils:0.5+'

    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

    implementation "com.mikepenz:iconics-core:3.1.0-rc01"
    implementation "com.mikepenz:iconics-views:3.1.0-rc01"
    implementation 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar'

    implementation 'com.theartofdev.edmodo:android-image-cropper:2.7.+'

    implementation 'org.apache.commons:commons-lang3:3.8'

    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'joda-time:joda-time:2.10'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.4.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'

    implementation 'com.facebook.fresco:imagepipeline-okhttp3:1.10.0'
    implementation 'com.facebook.fresco:fresco:1.10.0'
    implementation 'com.github.stfalcon:frescoimageviewer:0.5.0'

    // if Java use this. If using Kotlin do NOT use this.
    annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
    implementation "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
    implementation "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
    //Kotlin extenion
    implementation "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}"

    implementation 'com.onesignal:OneSignal:[3.9.1, 3.99.99]'
    implementation 'com.github.hosopy:actioncable-client-java:0.1.2'

    implementation "org.koin:koin-android:2.0.0-rc-2"
    implementation "org.koin:koin-androidx-scope:2.0.0-rc-2"
    implementation "org.koin:koin-androidx-viewmodel:2.0.0-rc-2"

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation 'junit:junit:4.12'
}

//Build time command line operations
task buildInternalApk(dependsOn: ['assembleInternal']) {
    doLast {
        exec {
            commandLine 'git', 'tag', "v" + project.android.defaultConfig.versionName + "+" + versionTimeStamp
        }
    }
}

task buildReleaseApk(dependsOn: ['assembleRelease']) {
    doLast {
        exec {
            commandLine 'git', 'tag', "v" + project.android.defaultConfig.versionName
        }
    }
}

//Build Time file operations

import com.crashlytics.tools.utils.PropertiesUtils

File crashlyticsProperties = new File("${project.projectDir.absolutePath}/fabric.properties")
android.applicationVariants.all { variant ->

    variant.outputs.all { output ->
        outputFileName = new File(
                "release_build",
                output.outputFile.name.replace(".apk", "-${variant.versionName}.apk").replace("-release", "").replace("-internal", ""))
    }

    def variantSuffix = variant.name.capitalize()
    def generateResourcesTask = project.tasks.getByName("fabricGenerateResources${variantSuffix}")
    def generatePropertiesTask = task("fabricGenerateProperties${variantSuffix}") {
        Properties properties = new Properties()
        //properties.put("apiSecret", variant.buildType.fabricApiSecret)
        //properties.put("apiKey", variant.buildType.fabricApiKey)
        PropertiesUtils.injectPropertyInFile(crashlyticsProperties, properties, "")
    }
    generateResourcesTask.dependsOn generatePropertiesTask
}
